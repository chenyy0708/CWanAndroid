package com.wanandroid.ui.fragment.main;import android.app.Activity;import android.os.Bundle;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.LinearSmoothScroller;import android.support.v7.widget.RecyclerView;import com.chen.common.base.BaseFragment;import com.chen.common.di.component.AppComponent;import com.wanandroid.bean.NavigationBean;import com.wanandroid.chen.R;import com.wanandroid.di.component.DaggerNavigationComponent;import com.wanandroid.di.module.NavigationModule;import com.wanandroid.mvp.contract.NavigationContract;import com.wanandroid.mvp.presenter.NavigationPresenter;import com.wanandroid.ui.adapter.NavigationAdapter;import com.wanandroid.ui.adapter.NavigationTabAdapter;import com.wanandroid.ui.fragment.IFragment;import com.wanandroid.utils.SnackbarUtils;import java.util.ArrayList;import java.util.List;import javax.inject.Inject;import butterknife.BindView;import q.rorbin.verticaltablayout.VerticalTabLayout;import q.rorbin.verticaltablayout.widget.TabView;/** * @author :ChenYangYi * @date :2018/04/24/13:57 * @description : 导航Fragment * @github :https://github.com/chenyy0708 */public class NavigationFragment extends BaseFragment<NavigationPresenter> implements NavigationContract.View, IFragment {    @BindView(R.id.vtb_tab_layout)    VerticalTabLayout vtbTabLayout;    @BindView(R.id.recyclerView)    RecyclerView recyclerView;    @Inject    LinearLayoutManager linearLayoutManager;    private NavigationAdapter navigationAdapter;    private LinearSmoothScroller smoothScroller;    private boolean needScroll;    private int index;    private boolean isClickTab;    public static NavigationFragment newInstance() {        Bundle args = new Bundle();        NavigationFragment fragment = new NavigationFragment();        fragment.setArguments(args);        return fragment;    }    @Override    protected int getLayoutResource() {        return R.layout.fragment_navigation;    }    @Override    public void initData(Bundle savedInstanceState) {        recyclerView.setLayoutManager(linearLayoutManager);        navigationAdapter = new NavigationAdapter(R.layout.item_navigation_rv, new ArrayList<>());        recyclerView.setAdapter(navigationAdapter);        mPresenter.getNavigationData();        initTabRvListener();    }    @Override    public void setupActivityComponent(AppComponent appComponent) {        DaggerNavigationComponent.builder()                .appComponent(appComponent)                .navigationModule(new NavigationModule(this))                .build()                .inject(this);    }    @Override    public Activity getVActivity() {        return null;    }    @Override    public void setNavigationData(List<NavigationBean> data) {        vtbTabLayout.setTabAdapter(new NavigationTabAdapter(data));        vtbTabLayout.setTabSelected(0);        navigationAdapter.replaceData(data);    }    @Override    public void showErrorTip(String msg) {        SnackbarUtils.showSnackMessage(_mActivity, msg);    }    /**     * tabLayout，Rv监听     */    private void initTabRvListener() {        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);                if (needScroll && (newState == RecyclerView.SCROLL_STATE_IDLE)) {                    needScroll = false;                    int indexDistance = index - linearLayoutManager.findFirstVisibleItemPosition();                    if (indexDistance >= 0 && indexDistance < recyclerView.getChildCount()) {                        int top = recyclerView.getChildAt(indexDistance).getTop();                        recyclerView.smoothScrollBy(0, top);                    }                }                rightLinkageLeft(newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                if (needScroll) {                    needScroll = false;                    int indexDistance = index - linearLayoutManager.findFirstVisibleItemPosition();                    if (indexDistance >= 0 && indexDistance < recyclerView.getChildCount()) {                        int top = recyclerView.getChildAt(indexDistance).getTop();                        recyclerView.smoothScrollBy(0, top);                    }                }            }        });        // 用于RecycleView平滑滑动到指定位置        smoothScroller = new LinearSmoothScroller(_mActivity) {            @Override            protected int getVerticalSnapPreference() {                return LinearSmoothScroller.SNAP_TO_START;            }        };        vtbTabLayout.addOnTabSelectedListener(new VerticalTabLayout.OnTabSelectedListener() {            @Override            public void onTabSelected(TabView tabView, int i) {//                // 手动滚动RecycleView//                if (isScrollRv) {//                    isScrollRv = false;//                } else {//                    // 点击tab滚动RecycleView//                    isSelectTab = true;////                    smoothScroller.setTargetPosition(i);////                    linearLayoutManager.startSmoothScroll(smoothScroller);//                    linearLayoutManager.scrollToPositionWithOffset(i, 0);//                }                isClickTab = true;                selectTag(i);            }            @Override            public void onTabReselected(TabView tabView, int i) {            }        });    }    /**     * Smooth right to select the position of the left tab     *     * @param position checked position     */    private void setChecked(int position) {        if (isClickTab) {            isClickTab = false;        } else {            vtbTabLayout.setTabSelected(index);        }        index = position;    }    /**     * Right recyclerView linkage left tabLayout     * SCROLL_STATE_IDLE just call once     *     * @param newState RecyclerView new scroll state     */    private void rightLinkageLeft(int newState) {        if (newState == RecyclerView.SCROLL_STATE_IDLE) {            if (isClickTab) {                isClickTab = false;                return;            }            int firstPosition = linearLayoutManager.findFirstVisibleItemPosition();            if (index != firstPosition) {                index = firstPosition;                setChecked(index);            }        }    }    private void selectTag(int i) {        index = i;        recyclerView.stopScroll();        smoothScrollToPosition(i);    }    private void smoothScrollToPosition(int currentPosition) {        int firstPosition = linearLayoutManager.findFirstVisibleItemPosition();        int lastPosition = linearLayoutManager.findLastVisibleItemPosition();        if (currentPosition <= firstPosition) {            recyclerView.smoothScrollToPosition(currentPosition);        } else if (currentPosition <= lastPosition) {            int top = recyclerView.getChildAt(currentPosition - firstPosition).getTop();            recyclerView.smoothScrollBy(0, top);        } else {            recyclerView.smoothScrollToPosition(currentPosition);            needScroll = true;        }    }    @Override    public void jumpToRVTop() {        // 点击tab滚动RecycleView        smoothScroller.setTargetPosition(0);        linearLayoutManager.startSmoothScroll(smoothScroller);        vtbTabLayout.setTabSelected(0);    }}